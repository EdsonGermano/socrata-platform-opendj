#!/bin/bash

set -e

COMMAND=${1:-start}

ulimit -n 10240

function link_config {
    local link=/opt/opendj/config/config.ldif
    local target=/data/opendj/config/config.ldif
    if [ -d /data ] && [ ! -L $link ]; then
        echo "Linking opendj config..."
        if [ ! -f $target ]; then
            mkdir -p $(dirname $target)
            mv $link $target
        fi
        ln -f -s $target $link
    fi
}

function link_db {
    local link=/opt/opendj/db
    local target=/data/opendj/db
    if [ -d /data ] && [ ! -L $link ]; then
        echo "Linking opendj db..."
        rmdir $link
        mkdir -p $target
        ln -f -s $target $link
    fi
}

function link_schema {
    local link_dir=/opt/opendj/config/schema
    local target_dir=/data/opendj/schema
    if [ -d $target_dir ]; then
        echo "Linking opendj schemas... [deprecating soon: ADD schemas to image from the Dockerfile]"
        ln -f -s $target_dir/* $link_dir/
    fi
}

function import_ldifs {
    LDIF_DIR=/data/opendj/ldif
    if [ -d $LDIF_DIR ]; then
        IMPORTED_DIR=/data/opendj/imported-ldif
        mkdir -p $IMPORTED_DIR
        for LDIF in $LDIF_DIR/*.ldif ; do
            FNAME=$(basename $LDIF)
            echo "Importing $FNAME..."
            bin/ldapmodify -p 4444 -D "$ROOT_USER_DN" -w $ROOT_USER_PASS -a -X -Z -f $LDIF

            # TODO: support offline import for speed
            # bin/import-ldif --includeBranch $BASE_DN --backendID userRoot --ldifFile $LDIF --rejectFile $IMPORTED_DIR/${FNAME}.reject --skipFile $IMPORTED_DIR/${FNAME}.skip
            # test ! -s $IMPORTED_DIR/${FNAME}.reject && rm $IMPORTED_DIR/${FNAME}.reject
            # test ! -s $IMPORTED_DIR/${FNAME}.skip && rm $IMPORTED_DIR/${FNAME}.skip
            mv $LDIF $IMPORTED_DIR
        done
    fi
}

link_schema # TODO: deprecate schema linking; build schemas into the image
link_config
link_db

case $COMMAND in
    start )
        bin/start-ds --nodetach ;;
    daemon )
        bin/start-ds ;;
    passwd )
        echo "not yet supported" || exit 1 ;;
    configure )
        bin/start-ds
        echo "Creating userRoot backend with base-dn:$BASE_DN"
        bin/dsconfig create-backend --backend-name userRoot --type=local-db --set base-dn:$BASE_DN --set enabled:true --noPropertiesFile --no-prompt -p 4444 --trustAll -D "$ROOT_USER_DN" -w $ROOT_USER_PASS
        bin/stop-ds
        echo "Complete."
        ;;
    import )
        bin/start-ds
        import_ldifs
        bin/stop-ds
        ;;
    shell )
        /bin/bash ;;
    * )
        echo "ERROR: Not a valid command: $COMMAND" || exit 1 ;;
esac
